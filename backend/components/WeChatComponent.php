<?php
/**
 * Created by PhpStorm.
 * User: a123
 * Date: 17/6/28
 * Time: 下午12:27
 */

namespace backend\components;


use common\components\wxpay\lib\WxPayConfig;
use yii\base\Exception;
use yii\base\Object;

class WeChatComponent extends Object
{
    public $webAppId; //TODO：AppID
    public $appSecret; //TODO：AppSecret
    public $encryptKey; //TODO：加密Key(EncryptKey)
    public $token; //TODO：公众平台自定义Token
    public $encryptMsg;
    public $decryptMsg;
    public $encryptType;
    public $nonce;
    public $timestamp;
    public $signature;
    public $msgSignature;
    public $errorCode;
    public $errorMsg;
    public $openid;
    public $AppId;


    /**
     * 初始化微信配置参数
     */
    public function init()
    {
        //TODO: 获取$_GET参数
        $data = $_REQUEST;
        $this->webAppId = WxPayConfig::APPID;
        $this->appSecret = WxPayConfig::APPSECRET;
        $this->encryptKey = WxPayConfig::ENCRYPT_KEY;
        $this->token = WxPayConfig::TOKEN;
        //TODO: 获取Xml数据信息
        $this->encryptMsg = file_get_contents("php://input");
        $this->AppId = \Yii::$app->request->get('appid','');
        $this->openid = !empty($data['openid'])? $data['openid'] : '';
        $this->encryptType = !empty($data['encrypt_type'])? $data['encrypt_type'] : '';
        $this->nonce = !empty($data['nonce'])? $data['nonce'] : '';
        $this->timestamp = !empty($data['timestamp'])? $data['timestamp'] : '';
        $this->signature = !empty($data['signature'])? $data['signature'] : '';
        $this->msgSignature = !empty($data['msg_signature'])? $data['msg_signature'] : '';

        if(!empty($this->encryptType)){
            $encrypt = $this->XmlToArr($this->encryptMsg)['Encrypt'];
            $this->decryptMsg = $this->decryptArr($encrypt);
        } else{
            $dataArr = $this->XmlToArr($this->encryptMsg);
            $this->decryptMsg = json_decode(json_encode($dataArr),true);
        }

        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * 验证签名 将密文解密成数组返回
     * @param $encrypt
     * @return bool
     */
    public function decryptArr($encrypt)
    {
        if(strlen($this->encryptKey) != 43){
            $this->errorCode = 40004;
            return false;
        }
        if ($this->timestamp == null) $this->timestamp = time();
        if (!$this->VerifySha1($encrypt))  return false;
        if (!$this->decrypt($encrypt,$rst)) return false;

        return $rst;
    }


    /**
     * 解密密文
     * @param $encrypted
     * @param $rst
     * @return bool
     */
    public function decrypt($encrypted,&$rst)
    {
        $key = base64_decode($this->encryptKey . "=");
        try {
            //TODO: 使用BASE64对需要解密的字符串进行解码
            $ciphertext_dec = base64_decode($encrypted);
            $module = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');
            $iv = substr($key, 0, 16);
            mcrypt_generic_init($module, $key, $iv);
            //TODO: 解密
            $decrypted = mdecrypt_generic($module, $ciphertext_dec);
            mcrypt_generic_deinit($module);
            mcrypt_module_close($module);
        } catch (Exception $e) {
            $this->errorCode = 40007;
            return false;
        }

        try {
            //TODO: 去除补位字符
            $result = $this->decode($decrypted);
            //TODO: 去除16位随机字符串,网络字节序和AppId
            if (strlen($result) < 16) return "";
            $content = substr($result, 16, strlen($result));
            $len_list = unpack("N", substr($content, 0, 4));
            $xml_len = $len_list[1];
            $xml_content = substr($content, 4, $xml_len);
            $from_appid = substr($content, $xml_len + 4);
        } catch (Exception $e) {
            $this->errorCode = 40008;
            return false;
        }
        if ($from_appid != $this->webAppId){
            $this->errorCode = 40005;
            return false;
        }
        $rst = $this->XmlToArr($xml_content);
        return true;
    }

    /**
     * XML格式转数组格式
     * @param $xml
     * @return array
     */
    public function XmlToArr($xml)
    {
        libxml_disable_entity_loader(true);
        $arr = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA)), true);
        return $arr;
    }

    /**
     * 用SHA1算法生成安全签名
     * @param string $token 票据
     * @param string $timestamp 时间戳
     * @param string $nonce 随机字符串
     * @param string $encrypt 密文消息
     * @return bool
     */
    public function VerifySha1($encrypt)
    {
        $array = [$encrypt, $this->token, $this->timestamp, $this->nonce];
        sort($array, SORT_STRING);
        $str = implode($array);
        $sign = sha1($str);
        if($sign != $this->msgSignature){
            $this->errorCode = 40001;
            return false;
        }
        return true;
    }

    /**
     * 对解密后的明文进行补位删除
     * @param decrypted //解密后的明文
     * @return bool|string //删除填充补位后的明文
     */
    public function decode($text)
    {
        $pad = ord(substr($text, -1));
        if ($pad < 1 || $pad > 32) {
            $pad = 0;
        }
        return substr($text, 0, (strlen($text) - $pad));
    }


    /**
     * 返回对应错误码信息
     * @param $errCode
     * @return string
     */
    public function getErrorMsg($errCode)
    {
        $config = \Yii::$app->getBasePath().'components/WeChatErrorCode.php';
        if(!file_exists($config)) return "找不到对应配置文件 WeChatErrorCode";
        $errMsg = require($config);
        return $errMsg[$errCode];
    }
}